bool MakeMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int fromSquareNum, int toSquareNum, bool &jumped) {
	Coordinates fromSquare = squareToArray(numRowsInBoard, fromSquareNum);
	Coordinates toSquare = squareToArray(numRowsInBoard, toSquareNum);
	int ydistance = abs(fromSquare(column) - toSquare(column));
	int xdistance = abs(fromSquare(row) - toSquare(row));

	if (ydistance == 1 && xdistance == 1) {
		return(true);
	}

	if (ydistance == 1 && xdistance == numRowsInBoard - 1) {
		return(true);
	}

	if (ydistance == 2 && xdistance == 2) {
		if (CMCheckersBoard[toSquare(row)][toSquare(column)] != 0) {
			cout << "Error;  illegal move" << endl;
			return(false);
		}
	}

	else if (ydistance != 1 && xdistance != 1) {
		cout << "Error; illegal move" << endl;
		return(false);
	}

	else if (CMCheckersBoard[toSquare(row)][toSquare(column)] == WHITESOLDIER || CMCheckersBoard[toSquare(row)][toSquare(column)] == WHITEMULE) {
		if (toSquareNum < fromSquareNum) {
			cout << "Error; illegal move" << endl;
			return(false);
		}
	}

	else if (CMCheckersBoard[toSquare(row)][toSquare(column)] == REDSOLDIER || CMCheckersBoard[toSquare(row)][toSquare(column)] == REDMULE) {
		if (toSquareNum > fromSquareNum) {
			cout << "Error; illegal move" << endl;
			return(false);
		}
	}

	CMCheckersBoard[toSquare(row)][toSquare(column)] = CMCheckersBoard[fromSquare(row)][fromSquare(column)];
	CMCheckersBoard[fromSquare(row)][fromSquare(column)] = 0;

	if (CMCheckersBoard[toSquare(row)][toSquare(column)] == WHITESOLDIER) {
		if (toSquare(row) = 1) {
			CMCheckersBoard[toSquare(row)][toSquare(column)] == WHITEKING;
		}
	}

	if (CMCheckersBoard[toSquare(row)][toSquare(column)] == WHITEMULE) {
		if (toSquare(row) = 1) {
			CMCheckersBoard[toSquare(row)][toSquare(column)] == WHITEKING;
			cout << "White has created a Mule King, Red wins the game" << endl;
			return(true);
		}
	}

	if (CMCheckersBoard[toSquare(row)][toSquare(column)] == REDSOLDIER) {
		if (toSquare(row) = MAX_ARRAY_SIZE) {
			CMCheckersBoard[toSquare(row)][toSquare(column)] == REDKING;
		}
	}

	if (CMCheckersBoard[toSquare(row)][toSquare(column)] == REDMULE) {
		if (toSquare(row) = MAX_ARRAY_SIZE) {
			CMCheckersBoard[toSquare(row)][toSquare(column)] == REDKING;
			cout << "Red has created a Mule King, White wins the game" << endl;
			return(true);
		}
	}
}
Coordinates squareToArray(int numRowsInBoard, int squareNum) {
	int counter = 0;
	Coordinates arrayCoordinates;
	while (numRowsInBoard <= squareNum) {
		squareNum -= numRowsInBoard;
		counter++;
	}

	arrayCoordinates.columns = squareNum;
	arrayCoordinates.rows = numRowsInBoard;
	return (arrayCoordinates);
}
