#include <iostream>
#include <iomanip>
#include <string>
#include <locale>

using namespace std;

const int MAX_ARRAY_SIZE = 18;
const int MIN_ARRAY_SIZE = 8;
const int MAX_PIECES = 72;
const int NOPLAYER = 0;
const int WHITEWINS = 1;
const int REDWINS = 2;
const int NOONEWINS = 0;
const int WHITESOLDIER = 1;
const int WHITEMULE = 2;
const int WHITEKING = 3;
const int REDSOLDIER = 4;
const int REDMULE = 5;
const int REDKING = 6;
const int WHITEPLAYER = 1;
const int REDPLAYER = 2;

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);
void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);

int main()
{
	int myCMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE] = { 0 };

	int xIndicesMove[MAX_PIECES];	// Declares move arrays
	int yIndicesMove[MAX_PIECES];	// Describes the checkers that can be moved

	int xIndicesJump[MAX_PIECES];	// Declares jump arrays
	int yIndicesJump[MAX_PIECES];	// Describes the checkers that can jump opponent's checkers

	int numRowsInBoard = 0;

	int testInt = 0;

	for (int i = 0; i < 3; i++)
	{
		
		cout << "Enter the number of squares along each edge of the board\n";
		cin >> numRowsInBoard;
		if (!cin.fail())	// Tests if it is an integer
		{
			if ((numRowsInBoard >= 8) && (numRowsInBoard <= 18))	// Tests size of board
			{
				if ((numRowsInBoard % 2) == 0)	// Tests if it is even
				{
					// ***** Continue here if all parameters pass ******
					InitializeBoard(myCMCheckersBoard, numRowsInBoard);

					DisplayBoard(myCMCheckersBoard, numRowsInBoard);

					return 1;
				}
				else
				{
					cerr << "ERROR: Board size odd.\n";
				}
			}
			else if (numRowsInBoard < 8)	// If it is too small
			{
				cerr << "ERROR: Board size too small.\n";
			}
			else	// If it is too big
			{
				cerr << "ERROR: Board size too large.\n";
			}
		}
		else
		{
			cerr << "ERROR: Board size is not an integer.\n";
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
		}
		cout << "8 <= number of squares <= 18\n\n";
	}
	cerr << "ERROR: Too many errors entering the size of the board.\n";
	return 0;
}

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard) {
	int CurrentRow = 1;
	int CurrentColumn = 1;

	for (int i = 1; i < MAX_ARRAY_SIZE + 1; i++) {
		for (int j = 1; j < MAX_ARRAY_SIZE + 1; j++) {

			if ((CurrentRow >= 1 && CurrentRow <= 3) || (MAX_ARRAY_SIZE - CurrentRow < 1) || (MAX_ARRAY_SIZE - CurrentRow > 3)) {
				CMCheckersBoard[i][j] = 0;
				continue;
			}
			else if (CurrentRow % 2 == 1 && CurrentColumn % 2 == 1) {
				CMCheckersBoard[i][j] = 0;
				continue;
			}
			else if (CurrentRow % 2 == 0 && CurrentColumn % 2 == 0) {
				CMCheckersBoard[i][j] = 0;
				continue;
			}
			else if (CurrentRow == 1) {
				CMCheckersBoard[i][j] = 2;
				continue;
			}
			else if (CurrentRow == MAX_ARRAY_SIZE) {
				CMCheckersBoard[i][j] = 5;
				continue;
			}
			else if (CurrentRow >= 2 && CurrentRow <= 4) {
				CMCheckersBoard[i][j] = 1;
				continue;
			}
			else if (MAX_ARRAY_SIZE - CurrentRow >= 1 && MAX_ARRAY_SIZE - CurrentRow <= 3) {
				CMCheckersBoard[i][j] = 4;
				continue;
			}
			CurrentColumn++;
		}
		CurrentRow++;
	}
}
void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	int BoardCount = 1;
	for (int i = 1; i < MAX_ARRAY_SIZE + 1; i++) {
		for (int j = 1; j < MAX_ARRAY_SIZE + 1; j++) {
			if (j == numRowsInBoard) {
				cout << endl;
				if (CMCheckersBoard[i][j] == 0) {
					cout << setw(4) << j + (i * 10);
				}
				else if (CMCheckersBoard[i][j] == 1) {
					cout << setw(4) << WHITESOLDIER;
				}
				else if (CMCheckersBoard[i][j] == 2) {
					cout << setw(4) << WHITEMULE;
				}
				else if (CMCheckersBoard[i][j] == 3) {
					cout << setw(4) << WHITEKING;
				}
				else if (CMCheckersBoard[i][j] == 4) {
					cout << setw(4) << REDSOLDIER;
				}
				else if (CMCheckersBoard[i][j] == 5) {
					cout << setw(4) << REDMULE;
				}
				else if (CMCheckersBoard[i][j] == 6) {
					cout << setw(4) << REDKING;
				}
			}
		}
	}
}
